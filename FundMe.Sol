// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.9.0;

// getting external data from chainlink contracts -> https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol
import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";

//contract should accept some kind of payment
contract FundMe {

  address owner;

  //to know total amount funded for particular address
  mapping(address => uint256) public addressToAmountFunded;
  
  constructor() public {
    owner = msg.sender;
  }
  
  function fund() public payable {
    addressToAmountFunded[msg.sender] += msg.value;
  }
  
  /*payable function (color red in remix) can recieve ETH while being called;
  if we try to send ETH to any function that is not mentioned as payable,
  the transaction will be rejected and fail.*/
  
  //function to get priceFeed version
  function getVersion public view returns (uint256) {
    AggregatorV3Interface priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331); //Kovan ETH-USD address https://docs.chain.link/docs/ethereum-addresses/
    return priceFeed.version();
  }
  
   //function to get price of ETH in USD
   function getPrice() public view returns(uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);
        (,int256 answer,,,) = priceFeed.latestRoundData();  //latestRoundData returns 5 things but we need onluy "answer"
        return uint256(answer * 10000000000); //convert to wei
    }
    
    //function to convert input ETH amount into USD
    function getConversionRate(uint256 ethAmount) public view returns(uint256) {
        uint256 ethPrice = getPrice();
        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1000000000000000000; // 1 ETH = 10^18 Wei
        return ethAmountInUSD;
    }
    
    function withdraw() payable public {
        require(msg.sender == owner);
        msg.sender.transfer(address(this).balance); //this -> current contract
    }
}
